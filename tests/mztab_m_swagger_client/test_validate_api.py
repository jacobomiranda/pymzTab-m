# coding: utf-8

"""
    mzTab-M reference implementation and validation API.

    This is the mzTab-M reference implementation and validation API service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest
import pytest
from collections import namedtuple

import mztab_m_swagger_client
from mztab_m_swagger_client import ApiClient, Parameter, Instrument, MzTab, Software, StudyVariable, MsRun, Assay, CV, Database, \
    SmallMoleculeSummary
from mztab_m_swagger_client.api.validate_api import ValidateApi  # noqa: E501
from mztab_m_swagger_client.rest import ApiException
from pathlib import Path, PurePath


class TestValidateApi(unittest.TestCase):
    """ValidateApi unit test stubs"""

    def setUp(self):
        self.api = mztab_m_swagger_client.api.validate_api.ValidateApi()  # noqa: E501
        self.datapath = PurePath(Path(__file__).parents[1].absolute(), Path('data'))

    def tearDown(self):
        pass
    
    def createTestData(self):
        software1 = Software(id=1, parameter=Parameter(id=1, cv_label="MS", cv_accession="MS:1001207", name="Mascot", value="2.3"), setting=["Fragment tolerance = 0.1Da", "Parent tolerance = 0.5Da"])

        #spParam = Parameter(id=2, cv_label="SEP", cv_accession="sep:00210", name="High Perfomance Liquid Chromatography")
        #sp = mztab_m_swagger_client.models.SampleProcessing(id=1, sample_processing=[spParam])

        instrument1Name = Parameter(id=3, cv_label="MS", cv_accession="MS:100049", name="LTQ Orbitrap")
        instrument1Source = Parameter(id=4, cv_label="MS", cv_accession="MS:1000073", name="ESI")
        instrument1Analyzer = Parameter(id=5, cv_label="MS", cv_accession="MS:1000291", name="linear ion trap")
        instrument1Detector = Parameter(id=6, cv_label="MS", cv_accession="MS:1000253", name="electron multiplier")
        instrument1 = Instrument(id=1, name=instrument1Name, analyzer=instrument1Analyzer, source=instrument1Source, detector=instrument1Detector)

        quantificationMethod = Parameter(id=7, name="test quantification", value="test quant value")

        msRun = MsRun(id=1, instrument_ref=instrument1, location="file:///C:/path/to/my/file", scan_polarity=[Parameter(id=8, cv_label="MS", cv_accession="MS:1000130", name="positive scan")])
        assay = Assay(id=1, name="First assay", ms_run_ref=msRun)
        studyVariable1 = StudyVariable(id=1, name="undefined", description="No description", assay_refs=[assay])

        controlledVocabulary = CV(id=1, label="MS", full_name="PSI-MS controlled vocabulary", version="4.1.11", uri="https://raw.githubusercontent.com/HUPO-PSI/psi-ms-CV/master/psi-ms.obo")

        database = Database(id=1, prefix="null", version="Unknown", uri="null", param=Parameter(id=9, name="no database", value=None))

        mtd = mztab_m_swagger_client.models.Metadata(
            mz_tab_id="SomeId 1234",
            mz_tab_version="2.0.0-M",
            title="My first test experiment",
            description="An experiment investigating interesting effects.",
            software=[software1],
            instrument=[instrument1],
            #sample_processing=[sp],
            quantification_method=quantificationMethod,
            ms_run=[msRun],
            assay=[assay],
            study_variable=[studyVariable1],
            cv=[controlledVocabulary],
            database=[database],
            small_molecule_quantification_unit=Parameter(id=10, cv_label="MS", cv_accession="MS:1002887", name="Progenesis QI normalised abundance"),
            small_molecule_feature_quantification_unit=Parameter(id=11, cv_label="MS", cv_accession="MS:1002887", name="Progenesis QI normalised abundance"),
            small_molecule_identification_reliability=Parameter(id=12, cv_label="MS", cv_accession="MS:1002896", name="compound identification confidence level"),
            id_confidence_measure=Parameter(id=13, cv_label="MS", cv_accession="MS:1002889", name="Progenesis MetaScope Score")
        )
        sms1 = SmallMoleculeSummary(
            sml_id=1,
            smf_id_refs=None,
            chemical_name=["Cer(d18:1/24:0)"],
            database_identifier=["null:123445"],
            chemical_formula=["C42H83NO3"],
            smiles=["CCCCCCCCCCCCCCCCCCCCCCCC(=O)N[C@@H](CO)[C@H](O)/C=C/CCCCCCCCCCCCC"],
            inchi=["InChI=1S/C42H83NO3/c1-3-5-7-9-11-13-15-17-18-19-20-21-22-23-24-26-28-30-32-34-36-38-42(46)43-40(39-44)41(45)37-35-33-31-29-27-25-16-14-12-10-8-6-4-2/h35,37,40-41,44-45H,3-34,36,38-39H2,1-2H3,(H,43,46)/b37-35+/t40-,41+/m0/s1"],
            uri=[None],
            theoretical_neutral_mass="649.6373",
            adduct_ions=["[M+H]1+"],
            reliability="1",
            best_id_confidence_measure=Parameter(id=14, cv_label="MS", cv_accession="MS:1001477", name="SpectraST"),
            best_id_confidence_value=0.958,
            abundance_assay=[4.448784E-05],
            abundance_study_variable=[4.448784E-05],
            abundance_variation_study_variable=[0.0]
        )
        mzTab = MzTab(metadata=mtd, small_molecule_summary=[sms1], small_molecule_feature=[], small_molecule_evidence=[])


        return mzTab

    def test_validate_mz_tab_file(self):
        mzTab = self.createTestData()
        self.api.validate_mz_tab_file(mzTab)
        pass

    def test_validate_from_json_mz_tab_file(self):
        import os
        #os.chdir(os.path.dirname(__file__))
        print(os.getcwd())
        filePath = PurePath(self.datapath, 'lipidomics-example.mzTab.json')
        with open(filePath, 'r') as jsonfile:
            txt = jsonfile.read().replace('\n', '')
            # -----------------
        Response = namedtuple('Response', 'data')
        response = Response(txt)

        apiclient = ApiClient()
        my_mztab = apiclient.deserialize(response, 'MzTab')

        print("Object structure")
        print(my_mztab)
        print("Sanitized Object structure")
        print(apiclient.sanitize_for_serialization(my_mztab))
        self.api.validate_mz_tab_file(my_mztab)
        pass


if __name__ == '__main__':
    unittest.main()

