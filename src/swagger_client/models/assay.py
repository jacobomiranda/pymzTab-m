# coding: utf-8

"""
    mzTab validation API.

    This is an mzTab validation service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.indexed_element import IndexedElement  # noqa: F401,E501
from swagger_client.models.ms_run import MsRun  # noqa: F401,E501
from swagger_client.models.parameter import Parameter  # noqa: F401,E501
from swagger_client.models.sample import Sample  # noqa: F401,E501


class Assay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'custom': 'list[Parameter]',
        'external_uri': 'str',
        'sample_ref': 'Sample',
        'ms_run_ref': 'list[MsRun]'
    }

    attribute_map = {
        'name': 'name',
        'custom': 'custom',
        'external_uri': 'external_uri',
        'sample_ref': 'sample_ref',
        'ms_run_ref': 'ms_run_ref'
    }

    def __init__(self, name=None, custom=None, external_uri=None, sample_ref=None, ms_run_ref=None):  # noqa: E501
        """Assay - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._custom = None
        self._external_uri = None
        self._sample_ref = None
        self._ms_run_ref = None
        self.discriminator = None

        self.name = name
        if custom is not None:
            self.custom = custom
        if external_uri is not None:
            self.external_uri = external_uri
        if sample_ref is not None:
            self.sample_ref = sample_ref
        self.ms_run_ref = ms_run_ref

    @property
    def name(self):
        """Gets the name of this Assay.  # noqa: E501


        :return: The name of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assay.


        :param name: The name of this Assay.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def custom(self):
        """Gets the custom of this Assay.  # noqa: E501


        :return: The custom of this Assay.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Assay.


        :param custom: The custom of this Assay.  # noqa: E501
        :type: list[Parameter]
        """

        self._custom = custom

    @property
    def external_uri(self):
        """Gets the external_uri of this Assay.  # noqa: E501


        :return: The external_uri of this Assay.  # noqa: E501
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this Assay.


        :param external_uri: The external_uri of this Assay.  # noqa: E501
        :type: str
        """

        self._external_uri = external_uri

    @property
    def sample_ref(self):
        """Gets the sample_ref of this Assay.  # noqa: E501


        :return: The sample_ref of this Assay.  # noqa: E501
        :rtype: Sample
        """
        return self._sample_ref

    @sample_ref.setter
    def sample_ref(self, sample_ref):
        """Sets the sample_ref of this Assay.


        :param sample_ref: The sample_ref of this Assay.  # noqa: E501
        :type: Sample
        """

        self._sample_ref = sample_ref

    @property
    def ms_run_ref(self):
        """Gets the ms_run_ref of this Assay.  # noqa: E501


        :return: The ms_run_ref of this Assay.  # noqa: E501
        :rtype: list[MsRun]
        """
        return self._ms_run_ref

    @ms_run_ref.setter
    def ms_run_ref(self, ms_run_ref):
        """Sets the ms_run_ref of this Assay.


        :param ms_run_ref: The ms_run_ref of this Assay.  # noqa: E501
        :type: list[MsRun]
        """
        if ms_run_ref is None:
            raise ValueError("Invalid value for `ms_run_ref`, must not be `None`")  # noqa: E501

        self._ms_run_ref = ms_run_ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
    
    def to_lines(self):
#         'name': 'str',
#         'custom': 'list[Parameter]',
#         'external_uri': 'str',
#         'sample_ref': 'Sample',
#         'ms_run_ref': 'list[MsRun]'
        lines = []
        if self.name: lines += ['\t{}'.format(self.name)]
        text = ''
        for e in self.custom or []:
            text += '\t{}'.format(e.as_line()) # maybe use the '|'.join...
        if self.custom: lines += ['-custom{}'.format(text)]
        if self.external_uri: lines += ['-external_uri\t{}'.format(self.external_uri)]
        if self.sample_ref: lines += ['-sample_ref\tsample[1]'] #{}'.format(self.sample_ref.as_line())]
        for idx,a in enumerate(self.ms_run_ref,1):
            lines += ['-ms_run_ref\tms_run[{}]'.format(idx)]
        
        return lines
    
    @staticmethod
    def fromText(lines):
        
        kwargs = {
        'name': 'str',
        'custom': 'list[Parameter]',
        'external_uri': 'str',
        'sample_ref': 'Sample',
        'ms_run_ref': 'list[MsRun]'
    }
        return Assay(**kwargs)