# coding: utf-8

"""
    mzTab validation API.

    This is an mzTab validation service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.indexed_element import IndexedElement  # noqa: F401,E501
from swagger_client.models.instrument import Instrument  # noqa: F401,E501
from swagger_client.models.parameter import Parameter  # noqa: F401,E501


class MsRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'location': 'str',
        'instrument_ref': 'Instrument',
        'format': 'Parameter',
        'id_format': 'Parameter',
        'fragmentation_method': 'list[Parameter]',
        'scan_polarity': 'list[Parameter]',
        'hash': 'str',
        'hash_method': 'Parameter'
    }

    attribute_map = {
        'name': 'name',
        'location': 'location',
        'instrument_ref': 'instrument_ref',
        'format': 'format',
        'id_format': 'id_format',
        'fragmentation_method': 'fragmentation_method',
        'scan_polarity': 'scan_polarity',
        'hash': 'hash',
        'hash_method': 'hash_method'
    }

    def __init__(self, name=None, location=None, instrument_ref=None, format=None, id_format=None, fragmentation_method=None, scan_polarity=None, hash=None, hash_method=None):  # noqa: E501
        """MsRun - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._location = None
        self._instrument_ref = None
        self._format = None
        self._id_format = None
        self._fragmentation_method = None
        self._scan_polarity = None
        self._hash = None
        self._hash_method = None
        self.discriminator = None

        self.name = name
        self.location = location
        if instrument_ref is not None:
            self.instrument_ref = instrument_ref
        if format is not None:
            self.format = format
        if id_format is not None:
            self.id_format = id_format
        if fragmentation_method is not None:
            self.fragmentation_method = fragmentation_method
        if scan_polarity is not None:
            self.scan_polarity = scan_polarity
        if hash is not None:
            self.hash = hash
        if hash_method is not None:
            self.hash_method = hash_method

    @property
    def name(self):
        """Gets the name of this MsRun.  # noqa: E501


        :return: The name of this MsRun.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MsRun.


        :param name: The name of this MsRun.  # noqa: E501
        :type: str
        """
        if name is None:
            name = ''
#             raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self):
        """Gets the location of this MsRun.  # noqa: E501


        :return: The location of this MsRun.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MsRun.


        :param location: The location of this MsRun.  # noqa: E501
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def instrument_ref(self):
        """Gets the instrument_ref of this MsRun.  # noqa: E501


        :return: The instrument_ref of this MsRun.  # noqa: E501
        :rtype: Instrument
        """
        return self._instrument_ref

    @instrument_ref.setter
    def instrument_ref(self, instrument_ref):
        """Sets the instrument_ref of this MsRun.


        :param instrument_ref: The instrument_ref of this MsRun.  # noqa: E501
        :type: Instrument
        """

        self._instrument_ref = instrument_ref

    @property
    def format(self):
        """Gets the format of this MsRun.  # noqa: E501


        :return: The format of this MsRun.  # noqa: E501
        :rtype: Parameter
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MsRun.


        :param format: The format of this MsRun.  # noqa: E501
        :type: Parameter
        """

        self._format = format

    @property
    def id_format(self):
        """Gets the id_format of this MsRun.  # noqa: E501


        :return: The id_format of this MsRun.  # noqa: E501
        :rtype: Parameter
        """
        return self._id_format

    @id_format.setter
    def id_format(self, id_format):
        """Sets the id_format of this MsRun.


        :param id_format: The id_format of this MsRun.  # noqa: E501
        :type: Parameter
        """

        self._id_format = id_format

    @property
    def fragmentation_method(self):
        """Gets the fragmentation_method of this MsRun.  # noqa: E501


        :return: The fragmentation_method of this MsRun.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._fragmentation_method

    @fragmentation_method.setter
    def fragmentation_method(self, fragmentation_method):
        """Sets the fragmentation_method of this MsRun.


        :param fragmentation_method: The fragmentation_method of this MsRun.  # noqa: E501
        :type: list[Parameter]
        """

        self._fragmentation_method = fragmentation_method

    @property
    def scan_polarity(self):
        """Gets the scan_polarity of this MsRun.  # noqa: E501


        :return: The scan_polarity of this MsRun.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._scan_polarity

    @scan_polarity.setter
    def scan_polarity(self, scan_polarity):
        """Sets the scan_polarity of this MsRun.


        :param scan_polarity: The scan_polarity of this MsRun.  # noqa: E501
        :type: list[Parameter]
        """

        self._scan_polarity = scan_polarity

    @property
    def hash(self):
        """Gets the hash of this MsRun.  # noqa: E501


        :return: The hash of this MsRun.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this MsRun.


        :param hash: The hash of this MsRun.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def hash_method(self):
        """Gets the hash_method of this MsRun.  # noqa: E501


        :return: The hash_method of this MsRun.  # noqa: E501
        :rtype: Parameter
        """
        return self._hash_method

    @hash_method.setter
    def hash_method(self, hash_method):
        """Sets the hash_method of this MsRun.


        :param hash_method: The hash_method of this MsRun.  # noqa: E501
        :type: Parameter
        """

        self._hash_method = hash_method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
    
    def to_lines(self):
#         'name': 'str',
#         'location': 'str',
#         'instrument_ref': 'Instrument',
#         'format': 'Parameter',
#         'id_format': 'Parameter',
#         'fragmentation_method': 'list[Parameter]',
#         'scan_polarity': 'list[Parameter]',
#         'hash': 'str',
#         'hash_method': 'Parameter'
        lines = []
        if self.name: lines += ['\t{}'.format(self.name)]
        if self.location: lines += ['-location\t{}'.format(self.location)]
        if self.format: lines += ['-format\t{}'.format(self.format.as_line())]
        if self.instrument_ref: lines += ['-instrument_ref\tinstrument[1]']#{}'.format(self.instrument_ref)]
        if self.id_format: lines += ['-id_format\t{}'.format(self.id_format.as_line())]
        for idx, e in enumerate(self.scan_polarity,1):
            lines += ['-scan_polarity[{}]\t{}'.format( idx, e.as_line())]
        for idx, e in enumerate(self.fragmentation_method or [],1):
            lines += ['-fragmentation_method[{}]\t{}'.format( idx, e.as_line())]
        if self.hash: lines += ['-hash\t{}'.format(self.hash)]
        if self.hash_method: lines += ['-hash_method\t{}'.format(self.hash_method.as_line())]
                                          
        lines += []
        return lines

    @staticmethod
    def fromText(lines):
        import re
        name = None
        location = None
        hash = None
        
        format = None
        id_format = None
        hash_method = None
        instrument_ref = None
        
        fragmentation_method_li = None
        scan_polarity_li=None
        
        for l in lines:
            if l.startswith('-location'):
                location = re.match('-location\t(.*)', l).group(1)
            elif l.startswith('-hash'):
                hash = re.match('-hash\t(.*)', l).group(1)
            elif l.startswith('-format'):
                format = re.match('-format\t(.*)', l).group(1)
            elif l.startswith('-id_format'):
                id_format = re.match('-id_format\t(.*)', l).group(1)
            elif l.startswith('-hash_method'):
                hash_method = re.match('-hash_method\t(.*)', l).group(1)
            elif l.startswith('-instrument_ref'):
                instrument_ref = re.match('-instrument_ref\t(.*)', l).group(1)
                
            elif l.startswith('-fragmentation_method'):
                if not fragmentation_method_li: fragmentation_method_li = []
                fragmentation_method_li.append(l)
            elif l.startswith('-scan_polarity'):
                if not scan_polarity_li: scan_polarity_li = []
                scan_polarity_li.append(l)
                
            else: # is the name
                name = l
                
            fragmentation_method = None
            if fragmentation_method_li:
                fragmentation_method =[]
                for f in fragmentation_method_li:
                    f_li = re.match('-fragmentation_method\[\d+\](.*)', l).group(1).strip()
                    fragmentation_method.append(Parameter.fromText(f_li))
            
            scan_polarity = None
            if scan_polarity_li:
                scan_polarity =[]
                for f in scan_polarity_li:
                    f_li = re.match('-scan_polarity\[\d+\](.*)', f).group(1).strip()
                    scan_polarity.append(Parameter.fromText(f_li))
        
        kwargs = {'name': name,
        'location': location,
        'instrument_ref': None ,#Instrument.fromText(instrument_ref),
        'format': Parameter.fromText(format),
        'id_format': Parameter.fromText(id_format),
        'fragmentation_method': fragmentation_method,
        'scan_polarity': scan_polarity,
        'hash': hash,
        'hash_method': Parameter.fromText(hash_method)}
        
        return MsRun(**kwargs)
        