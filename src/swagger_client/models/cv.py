# coding: utf-8

"""
    mzTab validation API.

    This is an mzTab validation service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.indexed_element import IndexedElement  # noqa: F401,E501


class CV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'full_name': 'str',
        'version': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'label': 'label',
        'full_name': 'full_name',
        'version': 'version',
        'uri': 'uri'
    }

    def __init__(self, label=None, full_name=None, version=None, uri=None):  # noqa: E501
        """CV - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._full_name = None
        self._version = None
        self._uri = None
        self.discriminator = None

        self.label = label
        self.full_name = full_name
        self.version = version
        self.uri = uri

    @property
    def label(self):
        """Gets the label of this CV.  # noqa: E501


        :return: The label of this CV.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CV.


        :param label: The label of this CV.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def full_name(self):
        """Gets the full_name of this CV.  # noqa: E501


        :return: The full_name of this CV.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CV.


        :param full_name: The full_name of this CV.  # noqa: E501
        :type: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def version(self):
        """Gets the version of this CV.  # noqa: E501


        :return: The version of this CV.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CV.


        :param version: The version of this CV.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def uri(self):
        """Gets the uri of this CV.  # noqa: E501


        :return: The uri of this CV.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CV.


        :param uri: The uri of this CV.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
    def to_lines(self):
#                 'label': 'str',
#         'full_name': 'str',
#         'version': 'str',
#         'uri': 'str'
        lines = []
        if self.label: lines += ['-label\t{}'.format(self.label)]
        if self.full_name: lines += ['-full_name\t{}'.format(self.full_name)]
        if self.version: lines += ['-version\t{}'.format(self.version)]
        if self.uri: lines += ['-uri\t{}'.format(self.uri)]
        return lines
    
    @staticmethod
    def fromText(lines):
        import re
        
        def sanitize(item):
            if isinstance(item, str):
                item = item.strip()
            
            if item is None or len(item) == 0:
                return None
            
            return item
        
        for l in lines:
            if l.startswith('-label'):
                label = re.match(r'-label\t(.*)', l).group(1)
            elif l.startswith('-full_name'):
                full_name = re.match(r'-full_name\t(.*)', l).group(1)
            elif l.startswith('-version'):
                version = re.match(r'-version\t(.*)', l).group(1)
            elif l.startswith('-uri'):
                uri = re.match(r'-uri\t(.*)', l).group(1)
        
        
        kwargs = {
        'label': sanitize(label),
        'full_name': sanitize(full_name),
        'version': sanitize(version),
        'uri': sanitize(uri)
    }
        return CV(**kwargs)
