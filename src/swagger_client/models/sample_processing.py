# coding: utf-8

"""
    mzTab validation API.

    This is an mzTab validation service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.indexed_element import IndexedElement  # noqa: F401,E501
from swagger_client.models.parameter import Parameter  # noqa: F401,E501


class SampleProcessing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_processing': 'list[Parameter]'
    }

    attribute_map = {
        'sample_processing': 'sampleProcessing'
    }

    def __init__(self, sample_processing=None):  # noqa: E501
        """SampleProcessing - a model defined in Swagger"""  # noqa: E501

        self._sample_processing = None
        self.discriminator = None

        if sample_processing is not None:
            self.sample_processing = sample_processing

    @property
    def sample_processing(self):
        """Gets the sample_processing of this SampleProcessing.  # noqa: E501


        :return: The sample_processing of this SampleProcessing.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._sample_processing

    @sample_processing.setter
    def sample_processing(self, sample_processing):
        """Sets the sample_processing of this SampleProcessing.


        :param sample_processing: The sample_processing of this SampleProcessing.  # noqa: E501
        :type: list[Parameter]
        """

        self._sample_processing = sample_processing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleProcessing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
    
    def line_content(self):
        #         'sample_processing': 'list[Parameter]'
        text = ''
        for e in self.sample_processing:
            text += '\t{}'.format(e.as_line())
        return text
    
    def to_lines(self):
        return [self.line_content()]

    @staticmethod
    def fromText(text):
        li = []
        for p in text.split('\t'):
            item = Parameter.fromText(p)
            li.append(item)
        return SampleProcessing(li)
    
