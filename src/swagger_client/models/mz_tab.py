# coding: utf-8

"""
    mzTab validation API.

    This is an mzTab validation service.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.comment import Comment  # noqa: F401,E501
from swagger_client.models.metadata import Metadata  # noqa: F401,E501
from swagger_client.models.small_molecule_evidence import SmallMoleculeEvidence  # noqa: F401,E501
from swagger_client.models.small_molecule_feature import SmallMoleculeFeature  # noqa: F401,E501
from swagger_client.models.small_molecule_summary import SmallMoleculeSummary  # noqa: F401,E501


class MzTab(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'Metadata',
        'small_molecule_summary': 'list[SmallMoleculeSummary]',
        'small_molecule_feature': 'list[SmallMoleculeFeature]',
        'small_molecule_evidence': 'list[SmallMoleculeEvidence]',
        'comment': 'list[Comment]'
    }

    attribute_map = {
        'metadata': 'metadata',
        'small_molecule_summary': 'smallMoleculeSummary',
        'small_molecule_feature': 'smallMoleculeFeature',
        'small_molecule_evidence': 'smallMoleculeEvidence',
        'comment': 'comment'
    }

    def __init__(self, metadata=None, small_molecule_summary=None, small_molecule_feature=None, small_molecule_evidence=None, comment=None):  # noqa: E501
        """MzTab - a model defined in Swagger"""  # noqa: E501

        self._metadata = None
        self._small_molecule_summary = None
        self._small_molecule_feature = None
        self._small_molecule_evidence = None
        self._comment = None
        self.discriminator = None

        self.metadata = metadata
        self.small_molecule_summary = small_molecule_summary
        self.small_molecule_feature = small_molecule_feature
        self.small_molecule_evidence = small_molecule_evidence
        if comment is not None:
            self.comment = comment

    @property
    def metadata(self):
        """Gets the metadata of this MzTab.  # noqa: E501


        :return: The metadata of this MzTab.  # noqa: E501
        :rtype: Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MzTab.


        :param metadata: The metadata of this MzTab.  # noqa: E501
        :type: Metadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def small_molecule_summary(self):
        """Gets the small_molecule_summary of this MzTab.  # noqa: E501


        :return: The small_molecule_summary of this MzTab.  # noqa: E501
        :rtype: list[SmallMoleculeSummary]
        """
        return self._small_molecule_summary

    @small_molecule_summary.setter
    def small_molecule_summary(self, small_molecule_summary):
        """Sets the small_molecule_summary of this MzTab.


        :param small_molecule_summary: The small_molecule_summary of this MzTab.  # noqa: E501
        :type: list[SmallMoleculeSummary]
        """
        if small_molecule_summary is None:
            raise ValueError("Invalid value for `small_molecule_summary`, must not be `None`")  # noqa: E501

        self._small_molecule_summary = small_molecule_summary

    @property
    def small_molecule_feature(self):
        """Gets the small_molecule_feature of this MzTab.  # noqa: E501


        :return: The small_molecule_feature of this MzTab.  # noqa: E501
        :rtype: list[SmallMoleculeFeature]
        """
        return self._small_molecule_feature

    @small_molecule_feature.setter
    def small_molecule_feature(self, small_molecule_feature):
        """Sets the small_molecule_feature of this MzTab.


        :param small_molecule_feature: The small_molecule_feature of this MzTab.  # noqa: E501
        :type: list[SmallMoleculeFeature]
        """
        if small_molecule_feature is None:
            raise ValueError("Invalid value for `small_molecule_feature`, must not be `None`")  # noqa: E501

        self._small_molecule_feature = small_molecule_feature

    @property
    def small_molecule_evidence(self):
        """Gets the small_molecule_evidence of this MzTab.  # noqa: E501


        :return: The small_molecule_evidence of this MzTab.  # noqa: E501
        :rtype: list[SmallMoleculeEvidence]
        """
        return self._small_molecule_evidence

    @small_molecule_evidence.setter
    def small_molecule_evidence(self, small_molecule_evidence):
        """Sets the small_molecule_evidence of this MzTab.


        :param small_molecule_evidence: The small_molecule_evidence of this MzTab.  # noqa: E501
        :type: list[SmallMoleculeEvidence]
        """
        if small_molecule_evidence is None:
            raise ValueError("Invalid value for `small_molecule_evidence`, must not be `None`")  # noqa: E501

        self._small_molecule_evidence = small_molecule_evidence

    @property
    def comment(self):
        """Gets the comment of this MzTab.  # noqa: E501


        :return: The comment of this MzTab.  # noqa: E501
        :rtype: list[Comment]
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MzTab.


        :param comment: The comment of this MzTab.  # noqa: E501
        :type: list[Comment]
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result
    
    
    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MzTab):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
    
    def to_lines(self):
        lines = []
        lines += self.metadata.to_lines()
        
        if self.small_molecule_summary[0]:
            first = self.small_molecule_summary[0]
            lines += ['{}\t{}'.format(first.header_prefix, first.header_as_line())]
        for e in self.small_molecule_summary:
            lines += e.to_lines()
        
        if self.small_molecule_feature[0]:
            first = self.small_molecule_feature[0]
            lines += ['{}\t{}'.format(first.header_prefix, first.header_as_line())]
        for e in self.small_molecule_feature:
            lines += e.to_lines()

        if self._small_molecule_evidence[0]:
            first = self._small_molecule_evidence[0]
            lines += ['{}\t{}'.format(first.header_prefix, first.header_as_line())]
        for e in self._small_molecule_evidence:
            lines += e.to_lines()
        
        for e in self.comment:
            line_number = e.line_number
            lines.insert(line_number-1, e.as_line())

        return lines
    
